soma todas as coordenadas de x / 3, faz o mesmo com y e com z.
fazer isso para todos os triangulos do objeto origem e para o destino.
para cada triangulo de origem, associar com o triangulo mais próximo pelo centróide do destino.
se de um lado tem 100 e do outro 50, para cada 2 triangulos vira 1 do outro lado.

- tem que criar uma outra janela e ler o objeto 2.
- o objeto 1 já está lido.
- criar uma 3° janela para fazer a animação do morphing

*Não importa se um objeto é maior que o outro.


Precisamos de uma função "idle" pra fazer a animação.
Pensei assim:

#Vamos precisar de um obj3 pra ser Morphado, podemos criar ele simplesmente clonando o obj1
#Caso obj3 == obj2, então não precisa rodar nada (Ou podemos começar um relógio e daí resetar, pra recomeçar o Morph)
metodo Morph():
    faces_1 = obj1.faces.lenght()
    faces_2 = obj2.faces.lenght()
    int forlimit
    if (faces_1 < faces_2) { forLimit = faces_2 }
    else { forLimit = faces_1 }
    #Essencialmente, o forLimit tem que ser grande o suficiente pra passar por todas as faces

            // Tudo isso acima pode ser feito ANTES do morph, daí o Morph fica só o loop e o resto abaixo, podemos definir no init e chamar o Morph com parametros específicos
            // PTambém podemos usar parametros para alterar o range() que define o j, no segundo for.

    for i in Range(forLimit):
        for j in Range(3): #Range pode ser 4 caso o morph seja com quadrados, se quiser podemos botar parametro la no Morph
            v1 = obj1.vertices[ obj1.face[i][j] ] # v1 recebe um objeto Ponto() que é um vértice do obj1
            v2 = obj2.vertices[ obj2.face[i][j] ] # v2 recebe um objeto Ponto() que é um vértice do obj2
            temp = Ponto(v2.x - v1.x, v2.y - v1.y, v2.z - v1.z) #Temp é a diferença entre v1 e v2 A.K.A: v2 - v1 = temp
            temp / [Quantidade de frames que a animação vai durar] #Divide temp pelo numero de frames da animação pra não ser instantânio
            obj3.vertices[ obj1.face[i][j] ] = v1 + temp # ob3 recebe essa mudança
            

        
    